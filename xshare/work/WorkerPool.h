//------------------------------------------------------------------------
// * @filename: WorkDispatcher.h
// *
// * @brief: 工作者池
// *
// * @author: XGM
// * @date: 2017/08/17
//------------------------------------------------------------------------
#pragma once

#include "xbase/Singleton.h"

#include <stdint.h>

namespace evpp {
	class EventLoop;
	class EventLoopThreadPool;
}

class WorkerPool : public Singleton<WorkerPool>
{
protected:
	friend class Singleton<WorkerPool>;
	WorkerPool(evpp::EventLoop* pBaseLoop, uint32_t nThreadNum);
	virtual ~WorkerPool();
public:

	//------------------------------------------------------------------------
	// 启动
	//------------------------------------------------------------------------
	bool Start();

	//------------------------------------------------------------------------
	// 关闭
	//------------------------------------------------------------------------
	void Stop();

	//------------------------------------------------------------------------
	// 同步
	//------------------------------------------------------------------------
	evpp::EventLoop* Sync();

	//------------------------------------------------------------------------
	// 异步
	//------------------------------------------------------------------------
	evpp::EventLoop* Async();

	//------------------------------------------------------------------------
	// 异步(根据哈希值分配)
	//------------------------------------------------------------------------
	evpp::EventLoop* AsyncWithHash(uint64_t nHash);

	//------------------------------------------------------------------------
	// 获得异步工作者数量
	//------------------------------------------------------------------------
	uint32_t GetAsyncNum();

private:
	evpp::EventLoop* m_pBaseLoop = nullptr;
	evpp::EventLoopThreadPool* m_pPool = nullptr;
};
